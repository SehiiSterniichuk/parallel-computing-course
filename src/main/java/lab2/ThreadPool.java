package lab2;

import java.util.ArrayList;
import java.util.List;

import static lab2.Printer.print;

public class ThreadPool {

    private final TaskQueue queue;

    private final QueueTimeCounter queueCounter;//–≤–∏–º—ñ—Ä—é—î –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —á–∞—Å –∑–∞–ø–æ–≤–Ω–µ–Ω–æ—ó —á–µ—Ä–≥–∏

    private int executionNumber = 0;//–ª—ñ—á–∏–ª—å–Ω–∏–∫ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —á–µ—Ä–≥–∏

    private final List<Thread> workers;

    private final ThreadWaitingCounter waitingCounter;//–ª—ñ—á–∏–ª—å–Ω–∏–∫ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ —á–∞—Å—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–æ—Ç–æ–∫—É

    private final Object lock;//–û–±'—î–∫—Ç —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó. –ú–æ–Ω—ñ—Ç–æ—Ä

    private boolean isTerminated = false;//–ø—Ä–∞–ø–æ—Ä —â–æ –ø–æ–∑–Ω–∞—á–∞—î —á–∏ –ø—É–ª –ø–æ—Ç–æ–∫—ñ–≤ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π(—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–∏–π) —â–µ

    private int counterOfWorkingThreads = 0;
    //–ª—ñ—á–∏–ª—å–Ω–∏–∫ –Ω–µ —Å–ø–ª—è—á–∏—Ö –ø–æ—Ç–æ–∫—ñ–≤ —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –¥–ª—è —Ç–æ–≥–æ, —â–æ–± –í–∏—Ä–æ–±–Ω–∏–∫ –¥–æ–¥–∞–≤–∞–≤ –Ω–æ–≤—ñ –∑–∞–¥–∞—á—ñ —Ç—ñ–ª—å–∫–∏ –∫–æ–ª–∏ –≤—Å—ñ –ø–æ—Ç–æ–∫–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Å–≤–æ—ó –∑–∞–¥–∞—á—ñ —Ç–∞ —Å–ø–ª—è—Ç—å

    private boolean initialized = false;//–ø—Ä–∞–ø–æ—Ä –ø–æ–∑–Ω–∞—á–∞—î —â–æ –ø—É–ª –∑–∞–ø—É—Å—Ç–∏–≤ —Å–≤–æ—ó –ø–æ—Ç–æ–∫–∏

    private final Object producerWaiter;
    //–º–æ–Ω—ñ—Ç–æ—Ä –ø–æ—Ç—Ä—ñ–±–µ–Ω –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó —Ä–æ–±–æ—Ç–∏ –∑ –í–∏—Ä–æ–±–Ω–∏–∫–æ–º –∑–∞–¥–∞—á. –ü—É–ª "–±—É–¥–∏—Ç—å" —ñ–Ω—à–∏–π –ø–æ—Ç—ñ–∫ –ø–æ–≤—ñ–¥–æ–º–ª—è—é—á–∏ —â–æ –≤–∂–µ –ø–æ—Ä–∞ –¥–æ–¥–∞–≤–∞—Ç–∏ –Ω–æ–≤—ñ –∑–∞–≤–¥–∞–Ω–Ω—è

    public ThreadPool(int numberOfWorkers) {
        if (numberOfWorkers < 1) {
            throw new IllegalArgumentException("number of workers must be bigger than 0");
        }
        workers = new ArrayList<>(numberOfWorkers);
        for (int i = 0; i < numberOfWorkers; ++i) {
            workers.add(new Thread(this::routine));
        }
        producerWaiter = new Object();
        lock = new Object();
        queue = new TaskQueue();
        queueCounter = new QueueTimeCounter();
        waitingCounter = new ThreadWaitingCounter();
    }

    public void addTask(Task task) {
        if (task == null) return;
        synchronized (lock) {
            if (isTerminated || counterOfWorkingThreads >= 1) {
                //counterOfWorkingThreads >= 1 –æ–∑–Ω–∞—á–∞—î —â–æ –ª–∏—à–∏–≤—Å—è —Ö–æ—á–∞ –± 1 –ø–æ—Ç—ñ–∫ —è–∫–∏–π —â–µ –ø—Ä–∞—Ü—é—î –Ω–∞–¥ —Å–≤–æ—î—é –∑–∞–¥–∞—á–µ—é
                print("The thread pool rejected the task: " + task);
                return;
            }
            if (!queue.add(task)) return;//—è–∫—â–æ —á–µ—Ä–≥–∞ –≤–µ—Ä—Ç–∞—î false –æ—Ç–∂–µ –∑–∞–¥–∞—á–∞ –Ω–µ –ø–æ–º—ñ—â–∞—î—Ç—å—Å—è –≤ –ª—ñ–º—ñ—Ç
        }
        print("Producer has added task: " + task);//–≤–∏–≤—ñ–¥ –Ω–∞ –µ–∫—Ä–∞–Ω —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∏—Ö –∑–∞–¥–∞—á
    }

    public void execute() {
        synchronized (lock) {
            if (isTerminated) {
                return;
            }
            queueCounter.setStart();//–ø–æ—á–∏–Ω–∞—î–º–æ –≤—ñ–¥–ª—ñ–∫ —á–∞—Å—É –∑–∞–ø–æ–≤–Ω–µ–Ω–æ—ó —á–µ—Ä–≥–∏
            executionNumber++;
            if (initialized) {
                lock.notifyAll();//—è–∫—â–æ initialized == true —Ç–æ–¥—ñ –ø–æ—Ç–æ–∫–∏ –≤–∂–µ –ø—Ä–∞—Ü—é—é—Ç—å —ñ —ó—Ö —Ç—Ä–µ–±–∞ –≤—Å—å–æ–≥–æ –ª–∏—à–µ —Ä–æ–∑–±—É–¥–∏—Ç–∏, —â–æ–± –≤–æ–Ω–∏ –ø–æ—á–∞–ª–∏ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏
                print("The producer notified the workers to start performing new tasks");
                return;
            }
            counterOfWorkingThreads = workers.size();
            initialized = true;
        }
        print("The threadPool has started threads");
        workers.forEach(Thread::start);
    }

    private void routine() {
        final String threadName = Thread.currentThread().getName();
        while (true) {
            Task task;
            synchronized (lock) {
                try {
                    if (!isTerminated && queue.isEmpty()) {
                        if (counterOfWorkingThreads == workers.size()) queueCounter.setFinish();
    //—è–∫—â–æ counterOfWorkingThreads == workers.size(), —Ç–æ —Ü–µ –ø–µ—Ä—à–∏–π –ø–æ—Ç—ñ–∫ —è–∫–∏–π –≤–∏—è–≤–∏–≤ —â–æ —á–µ—Ä–≥–∞ –ø—É—Å—Ç–∞, –æ—Ç–∂–µ –º–æ–∂–Ω–∞ –∑—É–ø–∏–Ω—è—Ç–∏ queueCounter –ª—ñ—á–∏–ª—å–Ω–∏–∫
                        long start = System.nanoTime();
                        waitForANewTask(threadName);
                        if (!isTerminated) {
    /*–ø–æ—Ç—ñ–∫ –º–æ–∂–µ –ø—Ä–æ—Å–Ω—É—Ç–∏—Å—è —á–µ—Ä–µ–∑ —Ç–µ —â–æ —Ä–æ–±–æ—Ç–∞ –ø—É–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —ñ
    —Ü–µ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–µ –±—É—Ç–∏ –º–µ–Ω—à–∏–º –∑–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–∏–π —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–æ—Ç–æ–∫—É –Ω–æ–≤–∏—Ö –∑–∞–¥–∞—á
    —Ç–æ–º—É –ø–æ—Ç—Ä—ñ–±–Ω–∞ —É–º–æ–≤–∞ !isTerminated*/
                            waitingCounter.count(start);
                        }
                    }
                    if (isTerminated) {
                        print(threadName + " is terminated");
                        return;
                    }
                    task = queue.poll();
                } catch (InterruptedException e) {
                    print(threadName + " was interrupted while waiting for a new task");
                    return;
                }
            }
            try {
                task.run();
            } catch (RuntimeInterruptedException e) {
                //–†–æ–±–æ—Ç—É –ø—É–ª—É —Ç—Ä–µ–±–∞ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –∑—É–ø–∏–Ω–∏—Ç–∏ –±–µ–∑ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å. –¢–æ–º—É –±—É–ª–æ –æ—Ç—Ä–∏–º–∞–Ω–æ RuntimeInterruptedException
                print(e.getMessage());
                return;
            }
        }
    }

    private void waitForANewTask(String threadName) throws InterruptedException {
        counterOfWorkingThreads--;
        if (counterOfWorkingThreads < 1) notifyProducer(threadName);
        // —è–∫—â–æ counterOfWorkingThreads < 1 —Ç–æ–¥—ñ —Ü–µ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä–æ–±–æ—á–∏–π –ø–æ—Ç—ñ–∫, –æ—Ç–∂–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ—á–∏–Ω–∞—Ç–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —á–µ—Ä–≥–∏
        print(threadName + " is waiting for a new tasküëâüëà");
        while (!isTerminated && queue.isEmpty()) {
            lock.wait();//—á–µ–∫–∞—î–º–æ –ø–æ–∫–∏ —Ä–æ–±–æ—Ç–∞ –ø—É–ª—É –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –∞–±–æ –Ω–µ –¥–æ–¥–∞–¥—É—Ç—å –Ω–æ–≤–∏—Ö –∑–∞–¥–∞—á —É —á–µ—Ä–≥—É
            //–û–¥–Ω–æ—á–∞—Å–Ω–æ –∑ —Ç–∏–º —â–æ –º–∏ –ø–æ—á–∏–Ω–∞—î–º–æ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è, —Ç–æ –∑–≤—ñ–ª—å–Ω—è—î—Ç—å—Å—è –º–æ–Ω—ñ—Ç–æ—Ä lock —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–ª—è –≤–∏—Ä–æ–±–Ω–∏–∫–∞,
            // —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –º–æ–∂–Ω–∞ –¥–æ–¥–∞–≤–∞—Ç–∏ –Ω–æ–≤—ñ –∑–∞–¥–∞—á—ñ. (–ü—Ä–æ –º–µ—Ç–æ–¥ producerCanAddNewTasks())
        }
        counterOfWorkingThreads++;
        print(threadName + " has woken up");
    }

    private void notifyProducer(String threadName) {
        synchronized (producerWaiter) {
            producerWaiter.notify();
        }
        print(threadName + " has notified the Producer to fill the queue");
    }

    public void terminate() {//–±–µ–∑–ø–µ—á–Ω–∞ –∑—É–ø–∏–Ω–∫–∞ –∑ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–¥–∞—á
        print("The termination of thread pool has started");
        synchronized (lock) {
            if (isTerminated) {
                print("The termination of the thread pool has already been completed.");
                return;
            }
            isTerminated = true;
            lock.notifyAll();//–±—É–¥–∏–º–æ –≤—Å—ñ –ø–æ—Ç–æ–∫–∏ —â–æ –æ—á—ñ–∫—É–≤–∞–ª–∏
        }
        for (Thread worker : workers) {
            try {
                worker.join();//–æ—á—ñ–∫—É—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–æ—Ç–æ–∫—ñ–≤
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
        }
        print("The termination of thread pool has finished");
        print("queue.size(): " + queue.size());
    }

    public void interrupt() {//–º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–∞ –∑—É–ø–∏–Ω–∫–∞ –±–µ–∑ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–¥–∞—á
        print("The producer has commanded the interruption of the thread pool.‚ò†Ô∏è");
        synchronized (lock) {
            isTerminated = true;
        }
        for (Thread thread : workers) {
            thread.interrupt();
        }
    }

    public boolean producerCanAddNewTasks() {
        synchronized (lock) {
            return initialized && !isTerminated && (queue.size() < 1) && (counterOfWorkingThreads < 1);
        }
    }

    public Object getProducerWaiter() {
        return producerWaiter;
    }

    public Result getResult() {
        int numberOfRejectedTasks = queue.getNumberOfRejectedTasks();
        float averageNumberOfRejectedTasks = ((float) numberOfRejectedTasks) / executionNumber;
        int numberOfAcceptedTasks = queue.getNumberOfAcceptedTasks();
        float averageNumberOfAcceptedTasks = ((float) numberOfAcceptedTasks) / executionNumber;
        return new Result(waitingCounter.averageTimeOfThreadInWaitingState(),
                queueCounter.maxTimeOfActiveQueue,
                queueCounter.minTimeOfActiveQueue,
                numberOfRejectedTasks,
                averageNumberOfRejectedTasks,
                numberOfAcceptedTasks,
                averageNumberOfAcceptedTasks
        );
    }

    private static class QueueTimeCounter {

        private long maxTimeOfActiveQueue = -1;

        private long minTimeOfActiveQueue = -1;

        private long start;

        private void setStart() {
            start = System.nanoTime();
        }

        private void setFinish() {
            long finish = System.nanoTime();
            long result = finish - start;
            if (minTimeOfActiveQueue < 0) {
                minTimeOfActiveQueue = maxTimeOfActiveQueue = result;
            } else if (maxTimeOfActiveQueue < result) {
                maxTimeOfActiveQueue = result;
            } else if (minTimeOfActiveQueue > result) {
                minTimeOfActiveQueue = result;
            }
        }
    }

    private static class ThreadWaitingCounter {

        private long totalWaitingTime = 0;

        private int numberOfWaitingThreads = 0;

        private void count(long start) {
            long finish = System.nanoTime();
            long result = finish - start;
            totalWaitingTime += result;
            numberOfWaitingThreads++;
        }

        private long averageTimeOfThreadInWaitingState() {
            return totalWaitingTime / numberOfWaitingThreads;
        }
    }
}
